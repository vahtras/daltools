import unittest
import unittest.mock as mock
import sys

import numpy as np
from pytest import approx, raises

from daltools import one
from . import tmpdir


class TestOne:
    def setup_method(self):
        self.tmpdir = tmpdir(__file__)
        self.aooneint = self.tmpdir/"AOONEINT"
        self.aoproper = self.tmpdir/"AOPROPER"
        self.header = one.readhead(self.aooneint)
        self.maxDiff = None

    def test_header_title(self):
        assert "=" in self.header["ttitle"]

    def test_header_naos(self):
        assert self.header["naos"] == (24,)

    def test_header_nsym(self):
        assert self.header["nsym"] == 1

    def test_header_potnuc(self):
        assert self.header["potnuc"] == approx(9.343638157971)

    def test_isordk_nucdep(self):
        isordk = one.readisordk(self.aooneint)
        assert isordk["nucdep"] == 3

    def test_isordk_chrn(self):
        isordk = one.readisordk(self.aooneint)
        assert isordk["chrn"][:3] == (8.0, 1.0, 1.0)

    def test_isordk_cooo(self):
        isordk = one.readisordk(self.aooneint)
        cooo = isordk["cooo"]
        nucdep = isordk["nucdep"]
        mxcent = len(cooo) // nucdep
        np.testing.assert_almost_equal(cooo[0::mxcent], [0., 0., 0.])
        np.testing.assert_almost_equal(cooo[1::mxcent], [0, 1.4, 1.1])
        np.testing.assert_almost_equal(cooo[2::mxcent], [0, -1.4, 1.1])

    def test_scfinp(self):
        scfinp = one.readscfinp(self.aooneint)
        assert scfinp["nsym"] == 1
        coor_bohr = (
            0, 0, 0, 0, 1.4, 1.1, 0, -1.4, 1.1
        )
        np.testing.assert_almost_equal(scfinp["cooo"], coor_bohr)

    def test_overlap(self):
        Sref = np.loadtxt('tests/test_one1.d/ov.txt')

        S = one.read("OVERLAP", self.aooneint)
        np.testing.assert_almost_equal(np.array(S.subblock[0]), Sref)

    def test_main(self):
        sys.argv[1:] = [str(self.aooneint)]
        with mock.patch("daltools.one.print") as mock_print:
            one.main()
        mock_print.assert_not_called()

    def test_main_head(self):
        sys.argv[1:] = [str(self.aooneint), "--head"]
        ref_output = """\
Header on AOONEINT
ttitle                                                                         ====================================                                    
nsym 1
naos (24,)
potnuc    9.34364
int_fmt i
float_fmt d\
"""

        with mock.patch("daltools.one.print") as mock_print:
            one.main()
        # mock_print.assert_called_once_with(ref_output)
        calls = [mock.call(s) for s in ref_output.split("\n")]
        mock_print.assert_has_calls(calls)

    def test_main_isordk(self):
        sys.argv[1:] = [str(self.aooneint), "--isordk"]
        ref_output = """\
nucdep=3 mxcent=500

 (3,)
              Column   1
       1      8.00000000
       2      1.00000000
       3      1.00000000


 (3, 3)
              Column   1    Column   2    Column   3
       2      0.00000000    1.40000000   -1.40000000
       3      0.00000000    1.10000000    1.10000000
"""



        with mock.patch("daltools.one.print") as mock_print:
            one.main()
        calls = [mock.call(s) for s in ref_output.split("\n")]
        mock_print.assert_has_calls([])

    def test_main_scfinp(self):
        sys.argv[1:] = [str(self.aooneint), "--scfinp"]
        ref_output = """\
ttitle                                                                         ====================================                                    
nsym 1
naos (24,)
potnuc  9.343638
kmax 12
ncent (1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3)
nbasis 24
jtran (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
itran (1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0)
ctran (1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
inamn (538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976335, 538976328, 538976328, 538976328, 538976328, 538976328, 538976328, 538976328, 538976328, 538976328, 538976328)
iptyp (1, 1, 1, 2, 3, 4, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 2, 3, 4, 1, 1, 2, 3, 4)
dpnuc (0.0, 0.0, 2.2)
nucdep 3
cooo (0.0, 0.0, 0.0, 0.0, 1.4, 1.1, 0.0, -1.4, 1.1)
ifxyz (0, 0, 0)
dummy 1e+20
qpol (1e+20, 1e+20, 1e+20, 1e+20, 1e+20, 1e+20)
qq (1e+20, 1e+20, 1e+20)
jfxyz (-9999999, -9999999, -9999999)"""

        with mock.patch("daltools.one.print") as mock_print:
            one.main()
        calls = [mock.call(s) for s in ref_output.split("\n")]
        mock_print.assert_has_calls(calls)

    def test_main_label(self, capsys):
        sys.argv[1:] = [str(self.aooneint), "--label", "OVERLAP", "-v"]
        ref_output = """\
OVERLAP 
Block 1

    1.00000000
   -0.34401655    1.00000000
   -0.15787004    0.78894079    1.00000000
    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.50214089    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.50214089    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.50214089    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
   -0.05016562    0.34062360    0.52041620    0.00000000    0.22682868    0.17822253    0.00000000    0.49076551    0.38560147    0.00000000    0.19451553    0.01677261    0.00000000   -0.12378261    1.00000000
   -0.06333053    0.39592401    0.69647082    0.00000000    0.08288677    0.06512532    0.00000000    0.30498198    0.23962870    0.00000000    0.01950002    0.00168144    0.00000000   -0.01240910    0.68479982    1.00000000
    0.00000000    0.00000000    0.00000000    0.19274717    0.00000000    0.00000000    0.37206323    0.00000000    0.00000000    0.25458054    0.00000000    0.00000000    0.20002757    0.00000000    0.00000000    0.00000000    1.00000000
    0.07634679   -0.35177263   -0.26003272    0.00000000   -0.16726039   -0.28286309    0.00000000    0.07244021   -0.23541809    0.00000000   -0.17634430   -0.17943580    0.00000000   -0.01507117    0.00000000    0.00000000    0.00000000    1.00000000
    0.05998677   -0.27639278   -0.20431142    0.00000000   -0.28286309   -0.02950239    0.00000000   -0.23541809    0.18709187    0.00000000   -0.04114022    0.20547264    0.00000000    0.18818594    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
   -0.05016562    0.34062360    0.52041620    0.00000000   -0.22682868    0.17822253    0.00000000   -0.49076551    0.38560147    0.00000000   -0.19451553    0.01677261    0.00000000   -0.12378261    0.13159709    0.31819122    0.00000000   -0.15388537    0.00000000    1.00000000
   -0.06333053    0.39592401    0.69647082    0.00000000   -0.08288677    0.06512532    0.00000000   -0.30498198    0.23962870    0.00000000   -0.01950002    0.00168144    0.00000000   -0.01240910    0.31819122    0.61999584    0.00000000   -0.16119214    0.00000000    0.68479982    1.00000000
    0.00000000    0.00000000    0.00000000    0.19274717    0.00000000    0.00000000    0.37206323    0.00000000    0.00000000   -0.25458054    0.00000000    0.00000000    0.20002757    0.00000000    0.00000000    0.00000000    0.04345628    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
   -0.07634679    0.35177263    0.26003272    0.00000000   -0.16726039    0.28286309    0.00000000    0.07244021    0.23541809    0.00000000   -0.17634430    0.17943580    0.00000000    0.01507117    0.15388537    0.16119214    0.00000000   -0.22910149    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
    0.05998677   -0.27639278   -0.20431142    0.00000000    0.28286309   -0.02950239    0.00000000    0.23541809    0.18709187    0.00000000    0.04114022    0.20547264    0.00000000    0.18818594    0.00000000    0.00000000    0.00000000    0.00000000    0.04345628    0.00000000    0.00000000    0.00000000    0.00000000    1.00000000

"""

        one.main()
        captured = capsys.readouterr()
        assert  ref_output == captured.out

    def test_main_label_unpack(self, capsys):
        sys.argv[1:] = [str(self.aooneint), "--label", "OVERLAP", "-v", "-u"]
        ref_output = """\
OVERLAP 
 (24, 24)
              Column   1    Column   2    Column   3    Column   4    Column   5
       1      1.00000000   -0.34401655   -0.15787004    0.00000000    0.00000000
       2     -0.34401655    1.00000000    0.78894079    0.00000000    0.00000000
       3     -0.15787004    0.78894079    1.00000000    0.00000000    0.00000000
       4      0.00000000    0.00000000    0.00000000    1.00000000    0.00000000
       5      0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
       7      0.00000000    0.00000000    0.00000000    0.50214089    0.00000000
       8      0.00000000    0.00000000    0.00000000    0.00000000    0.50214089
      15     -0.05016562    0.34062360    0.52041620    0.00000000    0.22682868
      16     -0.06333053    0.39592401    0.69647082    0.00000000    0.08288677
      17      0.00000000    0.00000000    0.00000000    0.19274717    0.00000000
      18      0.07634679   -0.35177263   -0.26003272    0.00000000   -0.16726039
      19      0.05998677   -0.27639278   -0.20431142    0.00000000   -0.28286309
      20     -0.05016562    0.34062360    0.52041620    0.00000000   -0.22682868
      21     -0.06333053    0.39592401    0.69647082    0.00000000   -0.08288677
      22      0.00000000    0.00000000    0.00000000    0.19274717    0.00000000
      23     -0.07634679    0.35177263    0.26003272    0.00000000   -0.16726039
      24      0.05998677   -0.27639278   -0.20431142    0.00000000    0.28286309

              Column   6    Column   7    Column   8    Column   9    Column  10
       4      0.00000000    0.50214089    0.00000000    0.00000000    0.00000000
       5      0.00000000    0.00000000    0.50214089    0.00000000    0.00000000
       6      1.00000000    0.00000000    0.00000000    0.50214089    0.00000000
       7      0.00000000    1.00000000    0.00000000    0.00000000    0.00000000
       8      0.00000000    0.00000000    1.00000000    0.00000000    0.00000000
       9      0.50214089    0.00000000    0.00000000    1.00000000    0.00000000
      10      0.00000000    0.00000000    0.00000000    0.00000000    1.00000000
      15      0.17822253    0.00000000    0.49076551    0.38560147    0.00000000
      16      0.06512532    0.00000000    0.30498198    0.23962870    0.00000000
      17      0.00000000    0.37206323    0.00000000    0.00000000    0.25458054
      18     -0.28286309    0.00000000    0.07244021   -0.23541809    0.00000000
      19     -0.02950239    0.00000000   -0.23541809    0.18709187    0.00000000
      20      0.17822253    0.00000000   -0.49076551    0.38560147    0.00000000
      21      0.06512532    0.00000000   -0.30498198    0.23962870    0.00000000
      22      0.00000000    0.37206323    0.00000000    0.00000000   -0.25458054
      23      0.28286309    0.00000000    0.07244021    0.23541809    0.00000000
      24     -0.02950239    0.00000000    0.23541809    0.18709187    0.00000000

              Column  11    Column  12    Column  13    Column  14    Column  15
       1      0.00000000    0.00000000    0.00000000    0.00000000   -0.05016562
       2      0.00000000    0.00000000    0.00000000    0.00000000    0.34062360
       3      0.00000000    0.00000000    0.00000000    0.00000000    0.52041620
       5      0.00000000    0.00000000    0.00000000    0.00000000    0.22682868
       6      0.00000000    0.00000000    0.00000000    0.00000000    0.17822253
       8      0.00000000    0.00000000    0.00000000    0.00000000    0.49076551
       9      0.00000000    0.00000000    0.00000000    0.00000000    0.38560147
      11      1.00000000    0.00000000    0.00000000    0.00000000    0.19451553
      12      0.00000000    1.00000000    0.00000000    0.00000000    0.01677261
      13      0.00000000    0.00000000    1.00000000    0.00000000    0.00000000
      14      0.00000000    0.00000000    0.00000000    1.00000000   -0.12378261
      15      0.19451553    0.01677261    0.00000000   -0.12378261    1.00000000
      16      0.01950002    0.00168144    0.00000000   -0.01240910    0.68479982
      17      0.00000000    0.00000000    0.20002757    0.00000000    0.00000000
      18     -0.17634430   -0.17943580    0.00000000   -0.01507117    0.00000000
      19     -0.04114022    0.20547264    0.00000000    0.18818594    0.00000000
      20     -0.19451553    0.01677261    0.00000000   -0.12378261    0.13159709
      21     -0.01950002    0.00168144    0.00000000   -0.01240910    0.31819122
      22      0.00000000    0.00000000    0.20002757    0.00000000    0.00000000
      23     -0.17634430    0.17943580    0.00000000    0.01507117    0.15388537
      24      0.04114022    0.20547264    0.00000000    0.18818594    0.00000000

              Column  16    Column  17    Column  18    Column  19    Column  20
       1     -0.06333053    0.00000000    0.07634679    0.05998677   -0.05016562
       2      0.39592401    0.00000000   -0.35177263   -0.27639278    0.34062360
       3      0.69647082    0.00000000   -0.26003272   -0.20431142    0.52041620
       4      0.00000000    0.19274717    0.00000000    0.00000000    0.00000000
       5      0.08288677    0.00000000   -0.16726039   -0.28286309   -0.22682868
       6      0.06512532    0.00000000   -0.28286309   -0.02950239    0.17822253
       7      0.00000000    0.37206323    0.00000000    0.00000000    0.00000000
       8      0.30498198    0.00000000    0.07244021   -0.23541809   -0.49076551
       9      0.23962870    0.00000000   -0.23541809    0.18709187    0.38560147
      10      0.00000000    0.25458054    0.00000000    0.00000000    0.00000000
      11      0.01950002    0.00000000   -0.17634430   -0.04114022   -0.19451553
      12      0.00168144    0.00000000   -0.17943580    0.20547264    0.01677261
      13      0.00000000    0.20002757    0.00000000    0.00000000    0.00000000
      14     -0.01240910    0.00000000   -0.01507117    0.18818594   -0.12378261
      15      0.68479982    0.00000000    0.00000000    0.00000000    0.13159709
      16      1.00000000    0.00000000    0.00000000    0.00000000    0.31819122
      17      0.00000000    1.00000000    0.00000000    0.00000000    0.00000000
      18      0.00000000    0.00000000    1.00000000    0.00000000   -0.15388537
      19      0.00000000    0.00000000    0.00000000    1.00000000    0.00000000
      20      0.31819122    0.00000000   -0.15388537    0.00000000    1.00000000
      21      0.61999584    0.00000000   -0.16119214    0.00000000    0.68479982
      22      0.00000000    0.04345628    0.00000000    0.00000000    0.00000000
      23      0.16119214    0.00000000   -0.22910149    0.00000000    0.00000000
      24      0.00000000    0.00000000    0.00000000    0.04345628    0.00000000

              Column  21    Column  22    Column  23    Column  24
       1     -0.06333053    0.00000000   -0.07634679    0.05998677
       2      0.39592401    0.00000000    0.35177263   -0.27639278
       3      0.69647082    0.00000000    0.26003272   -0.20431142
       4      0.00000000    0.19274717    0.00000000    0.00000000
       5     -0.08288677    0.00000000   -0.16726039    0.28286309
       6      0.06512532    0.00000000    0.28286309   -0.02950239
       7      0.00000000    0.37206323    0.00000000    0.00000000
       8     -0.30498198    0.00000000    0.07244021    0.23541809
       9      0.23962870    0.00000000    0.23541809    0.18709187
      10      0.00000000   -0.25458054    0.00000000    0.00000000
      11     -0.01950002    0.00000000   -0.17634430    0.04114022
      12      0.00168144    0.00000000    0.17943580    0.20547264
      13      0.00000000    0.20002757    0.00000000    0.00000000
      14     -0.01240910    0.00000000    0.01507117    0.18818594
      15      0.31819122    0.00000000    0.15388537    0.00000000
      16      0.61999584    0.00000000    0.16119214    0.00000000
      17      0.00000000    0.04345628    0.00000000    0.00000000
      18     -0.16119214    0.00000000   -0.22910149    0.00000000
      19      0.00000000    0.00000000    0.00000000    0.04345628
      20      0.68479982    0.00000000    0.00000000    0.00000000
      21      1.00000000    0.00000000    0.00000000    0.00000000
      22      0.00000000    1.00000000    0.00000000    0.00000000
      23      0.00000000    0.00000000    1.00000000    0.00000000
      24      0.00000000    0.00000000    0.00000000    1.00000000

"""

        one.main()
        captured = capsys.readouterr()
        assert ref_output == captured.out

    def test_read_wrong_file(self):
        with raises(RuntimeError):
            one.readhead(self.aoproper)

    def test_wrong_integer_format(self):
        class Dummy(object):
            reclen = 7

            def __len__(self):
                return self.reclen

        with raises(RuntimeError):
            i = one._get_integer_format(Dummy())
